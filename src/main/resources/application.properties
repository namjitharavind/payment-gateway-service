spring.application.name=payment-gateway-service
server.servlet.context-path=/payment-gateway-service
server.port=9084
spring.datasource.url=jdbc:h2:mem:paymentGatewayDb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.h2.console.enabled=true
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always


spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.show-sql=true
spring.jpa.show-sql = true

management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always


#Aspect order Higher value have higher priority. Here Retry will happen first after that only circuit breaker will happen
resilience4j.retry.retryAspectOrder=2
resilience4j.circuitbreaker.circuitBreakerAspectOrder=1

#Payment Service API properties
rest.api.payment.service.name = payment-service
rest.api.payment.service.base-url = http://localhost:9083/payment-service/payment
rest.api.payment.service.payment-status-update-callback-api = /status-update-callback


#Payment Service Retry properties
resilience4j.retry.instances.payment-service.max-attempts=3
resilience4j.retry.instances.payment-service.wait-duration=1s


#Payment Service Circuit Breaker properties
resilience4j.circuitbreaker.backends.payment-service.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.backends.payment-service.sliding-window-size=6
resilience4j.circuitbreaker.backends.payment-service.minimum-number-of-calls=4
resilience4j.circuitbreaker.backends.payment-service.wait-duration-in-open-state=20s
resilience4j.circuitbreaker.backends.payment-service.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.backends.payment-service.failure-rate-threshold=50


logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
management.tracing.sampling.probability=1.0
management.metrics.distribution.percentiles-histogram.http.server.requests=true